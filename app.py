import streamlit as st
import os
from dotenv import load_dotenv
import google.generativeai as genai

load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-2.0-flash')

class Agent:
    def __init__(self, name, model, instruction, description, tools=None):
        self.name = name
        self.model = model
        self.instruction = instruction
        self.description = description
        self.tools = tools if tools is not None else []

    def run(self, input_prompt):
        prompt_with_instruction = f"{self.instruction}\\n\\n{input_prompt}"
        response = self.model.generate_content(prompt_with_instruction)
        return response.text

def call_agent(agent, input_prompt):
    return agent.run(input_prompt)

# --- Agente 1: Buscador de Informa√ß√µes Gerais ---
def agente_buscador(localizacao, preferencias_rotas):
    buscador = Agent(
        name="agente_buscador_geral",
        model=model,
        instruction=f"""
        Voc√™ √© um assistente de pesquisa especializado em encontrar informa√ß√µes relevantes sobre diversas categorias em uma dada localiza√ß√£o.
        Sua tarefa √© utilizar o Google Search para encontrar informa√ß√µes sobre:
        - Trilhas, parques, √°reas verdes e ruas tranquilas adequadas para caminhada e corrida na localiza√ß√£o fornecida: {localizacao}, considerando as prefer√™ncias: {preferencias_rotas}.
        - Bares e restaurantes mais bem avaliados no Google Maps na localiza√ß√£o: {localizacao}. Priorize aqueles com boas avalia√ß√µes (4.0 estrelas ou mais) e um bom n√∫mero de avalia√ß√µes.
        - Pontos tur√≠sticos mais bem avaliados no Google Maps na localiza√ß√£o: {localizacao}. Priorize aqueles com boas avalia√ß√µes e descri√ß√µes interessantes.

        Para cada categoria, forne√ßa uma lista concisa de at√© 3 sugest√µes, incluindo o nome e uma breve descri√ß√£o ou detalhes relevantes encontrados na busca.
        """,
        description="Agente que busca informa√ß√µes sobre rotas, bares, restaurantes e pontos tur√≠sticos.",
    )
    entrada_do_agente_buscador = f"Localiza√ß√£o: {localizacao}\\nPrefer√™ncias de Rotas: {preferencias_rotas}"
    return call_agent(buscador, entrada_do_agente_buscador)

# --- Agente 2: Planejador de Experi√™ncias ---
def agente_planejador(localizacao, preferencias_rotas, resultados_busca):
    planejador = Agent(
        name="agente_planejador_experiencias",
        model=model,
        instruction=f"""
        Voc√™ √© um planejador de experi√™ncias especializado em organizar informa√ß√µes sobre rotas, bares, restaurantes e pontos tur√≠sticos.
        Com base nos resultados da busca ({resultados_busca}) para a localiza√ß√£o ({localizacao}) e nas prefer√™ncias de rotas ({preferencias_rotas}), sua tarefa √©:
        - Organizar as informa√ß√µes encontradas em categorias claras: Rotas, Bares, Restaurantes e Pontos Tur√≠sticos.
        - Para cada categoria, liste as sugest√µes com o nome e a descri√ß√£o fornecida pelo agente buscador.
        """,
        description="Agente que organiza as informa√ß√µes para o usu√°rio.",
    )
    entrada_do_agente_planejador = f"Localiza√ß√£o: {localizacao}\\nPrefer√™ncias de Rotas: {preferencias_rotas}\\nResultados da Busca: {resultados_busca}"
    return call_agent(planejador, entrada_do_agente_planejador)

# --- Agente 3: Detalhador de Op√ß√µes ---
def agente_detalhador(localizacao, plano_experiencias):
    detalhador = Agent(
        name="agente_detalhador_opcoes",
        model=model,
        instruction=f"""
        Voc√™ √© um especialista em fornecer detalhes adicionais sobre as op√ß√µes de rotas, bares, restaurantes e pontos tur√≠sticos em {localizacao}.
        Com base no plano de experi√™ncias ({plano_experiencias}), escolha uma op√ß√£o de cada categoria e busque mais detalhes relevantes sobre ela no Google Search.
        Para rotas, procure informa√ß√µes sobre o percurso, dificuldade e pontos de interesse.
        Para bares e restaurantes, procure informa√ß√µes sobre o tipo de ambiente, especialidades e avalia√ß√µes.
        Para pontos tur√≠sticos, procure informa√ß√µes sobre o que torna o local interessante e o que os visitantes podem esperar.
        Apresente esses detalhes de forma concisa.
        """,
        description="Agente que fornece detalhes sobre as op√ß√µes.",
    )
    entrada_do_agente_detalhador = f"Localiza√ß√£o: {localizacao}\\nPlano de Experi√™ncias: {plano_experiencias}"
    return call_agent(detalhador, entrada_do_agente_detalhador)

# --- Agente 4: Avaliador e Recomendador ---
def agente_avaliador(localizacao, preferencias_rotas, detalhes_opcoes):
    avaliador = Agent(
        name="agente_avaliador_recomendador",
        model=model,
        instruction=f"""
        Voc√™ √© um avaliador e recomendador de experi√™ncias em {localizacao}.
        Com base nos detalhes das op√ß√µes ({detalhes_opcoes}) e nas prefer√™ncias de rotas do usu√°rio ({preferencias_rotas}), forne√ßa algumas recomenda√ß√µes personalizadas.
        Destaque as op√ß√µes que melhor se encaixam nas prefer√™ncias do usu√°rio e explique o porqu√™.
        Ofere√ßa sugest√µes de como combinar diferentes atividades (ex: uma caminhada seguida de um almo√ßo em um restaurante bem avaliado).
        """,
        description="Agente que avalia as op√ß√µes e faz recomenda√ß√µes.",
    )
    entrada_do_agente_avaliador = f"Localiza√ß√£o: {localizacao}\\nPrefer√™ncias de Rotas: {preferencias_rotas}\\nDetalhes das Op√ß√µes: {detalhes_opcoes}"
    return call_agent(avaliador, entrada_do_agente_avaliador)

def main():
    st.title("üìç ExplorAI: Rotas, Sabores e Tesouros Locais üó∫Ô∏è")

    localizacao = st.text_input("Digite a sua LOCALIZA√á√ÉO:", "S√£o Sebasti√£o, SP")
    preferencias_rotas = st.text_area("Quais s√£o suas PREFER√äNCIAS para a rota? (ex: dist√¢ncia, n√≠vel de dificuldade, tipo de paisagem):", "Dist√¢ncia: 5-10 km, N√≠vel: Moderado, Paisagem: Praia e trilha")

    if st.button("Explorar Local"):
        if not localizacao:
            st.error("Por favor, digite sua localiza√ß√£o.")
        else:
            st.info(f"Buscando informa√ß√µes para: {localizacao}...")

            with st.spinner("Buscando informa√ß√µes gerais..."):
                resultados_busca = agente_buscador(localizacao, preferencias_rotas)
                st.subheader("üîç Resultados da Busca:")
                st.markdown(resultados_busca)

            with st.spinner("Organizando as op√ß√µes..."):
                plano_experiencias = agente_planejador(localizacao, preferencias_rotas, resultados_busca)
                st.subheader("üó∫Ô∏è Plano de Experi√™ncias:")
                st.markdown(plano_experiencias)

            with st.spinner("Detalhando as op√ß√µes..."):
                detalhes_opcoes = agente_detalhador(localizacao, plano_experiencias)
                st.subheader("‚ú® Detalhes das Op√ß√µes:")
                st.markdown(detalhes_opcoes)

            with st.spinner("Gerando recomenda√ß√µes personalizadas..."):
                recomendacoes_finais = agente_avaliador(localizacao, preferencias_rotas, detalhes_opcoes)
                st.subheader("üí° Recomenda√ß√µes Personalizadas:")
                st.markdown(recomendacoes_finais)

if __name__ == "__main__":
    main()